grammar com.regnosys.rosetta.Rosetta with org.eclipse.xtext.common.Terminals
import "http://www.rosetta-model.com/Rosetta"
import "http://www.rosetta-model.com/RosettaSimple"
import "http://www.rosetta-model.com/RosettaExpression"

// general TODO: naming is inconsistent, e.g., 
// - [RosettaSynonymSource]
// - [RosettaSynonymSource|ValidID]
// - [RosettaSynonymSource|QualifiedName]

RosettaModel:
	'namespace' name=(QualifiedName | STRING) (':' RosettaDefinable)? // TODO do we need STRING here? It is not supported for highlighting.
	// TODO colon is inconsistent with other documentation
	
	('version' version=STRING)? // TODO: could do better than STRING
	
	imports += Import*
	
	(configurations += RosettaQualifiableConfiguration)* // TODO think about having only RootElements or only configurations
	(elements += (RosettaRootElement | RootElement))*
;

QualifiedName:
	ValidID ('.' ValidID)*
;

Import:
	'import' importedNamespace=QualifiedNameWithWildcard;

QualifiedNameWithWildcard:
	QualifiedName ('.' '*')?;

RootElement:
	Annotation | Data | Function;

fragment Definable:
	'<'definition=STRING'>';

Annotation:
	'annotation' RosettaNamed ':' Definable?
	('[' 'prefix' prefix = ValidID ']')?
	attributes += Attribute*
;

fragment Annotations returns Annotated:
	annotations+=AnnotationRef;

fragment Synonyms*:
	synonyms+=RosettaSynonym;

fragment ClassSynonyms*:
	synonyms+=RosettaClassSynonym;

fragment References*:
	references+=RosettaDocReference;

fragment RuleReference*:
	ruleReference=RosettaRuleReference;
// TODO: cleanup annotations. Now it's a mix of hard-coded annotations and these kind of annotations.
// Hard-coded:
// - prefix annotation
// - (class/enum) synonyms
// - external (class/enum) synonym
// - docReference
// - ruleReference
AnnotationRef:
	'[' annotation = [Annotation|ValidID] (attribute = [Attribute|ValidID] (qualifiers += AnnotationQualifier)*)? ']'
;

AnnotationQualifier:
	qualName=STRING '=' (qualValue=STRING | qualPath=RosettaAttributeReference)
;

Data:
	'type' RosettaNamed ('extends' superType = [Data|QualifiedName])? ':' Definable?
	(References|Annotations|ClassSynonyms)*
	attributes += Attribute*
	conditions += Condition*
;

Attribute:
	(override ?= 'override')? RosettaNamed RosettaTyped card=RosettaCardinality Definable?
	(References|Annotations|Synonyms)*
	RuleReference?
;

Enumeration returns RosettaEnumeration:
	'enum' RosettaNamed ('extends' superType=[RosettaEnumeration|QualifiedName])? ':' RosettaDefinable?
		References*
		(synonyms += RosettaSynonym)*
		enumValues += RosettaEnumValue*
;

Function:
	'func' 
	(
		RosettaNamed
		| ({FunctionDispatch} RosettaNamed '(' attribute=[Attribute|ValidID] ':' value=EnumValueReference')')
	)
	 ':' =>Definable?
	(References|Annotations)*
	('inputs' ':' inputs += Attribute+)?
	('output' ':' output = Attribute)?
	
	(shortcuts     += ShortcutDeclaration)*
	conditions     += Condition*
	operations     += Operation*
	postConditions += PostCondition*
;

ShortcutDeclaration:
	'alias' RosettaNamed ':' =>Definable?  expression=RosettaCalcExpression
;

Condition:
	'condition' RosettaNamed? ':' =>Definable?
		=>(References|Annotations)* // conflicts with ListLiteral as RosettaCalcExpression
		expression=RosettaCalcExpression
;

enum Necessity:
	optional | required
;

PostCondition returns Condition:
	postCondition ?= 'post-condition'  RosettaNamed? ':' =>Definable?
	expression     = RosettaCalcExpression
;

Operation:
	AssignOutputOperation | OutputOperation
;

// @Compat deprecated - to be deleted once all models updated
AssignOutputOperation:
	'assign-output' assignRoot = [AssignPathRoot|ValidID] (path = Segment)? ':' =>Definable?
	expression = RosettaCalcExpressionWithAsKey
;

OutputOperation:
	('set' | add ?= 'add') assignRoot = [AssignPathRoot|ValidID] (path = Segment)? ':' =>Definable?
		expression = RosettaCalcExpressionWithAsKey
;

Segment:
	'->' attribute = [Attribute|ValidID] (next = Segment)?;

EnumValueReference returns RosettaEnumValueReference:
	enumeration=[RosettaEnumeration|QualifiedName] '->' value=[RosettaEnumValue|ValidID]
;

EmptyLiteral returns RosettaExpression:
	{ListLiteral} 'empty'
;

ListLiteral:
	{ListLiteral} '[' (elements += RosettaCalcExpression (',' elements += RosettaCalcExpression )*)? ']';

// old stuff
RosettaRootElement:
	Enumeration | RosettaBody | RosettaCorpus | RosettaSegment | 
	RosettaBasicType | RosettaRecordType | RosettaLibraryFunction | RosettaSynonymSource |
	RosettaBlueprint | RosettaQualifiedType | RosettaCalculationType  | RosettaMetaType | RosettaExternalSynonymSource |
	RosettaExternalRuleSource | RosettaBlueprintReport
;



/**********************************************************************
 * Common rules 
 */
fragment RosettaDefinable: // TODO should a definition be able to hold any character? Escape characters? Spaces between '<' and '"'?
	('<' definition=STRING '>') // TODO rename to documentation?
;

fragment RosettaNamed:
	name = ValidID
;

fragment RosettaTyped:
	type=[RosettaType|QualifiedName]
;


ValidID:
	(ID | 'condition' | 'source' | 'value' | 'version' // used in CDM model
	)
;


/**********************************************************************
 * Built-in
 */ 

RosettaBasicType:
	'basicType' RosettaNamed
;

RosettaSynonymSource:
	'synonym' 'source' RosettaNamed 
;

RosettaRecordType:
	'recordType' RosettaNamed '{'
		features+=RosettaRecordFeature*
	'}'
;

RosettaRecordFeature:
	RosettaNamed type=[RosettaBuiltinType|ValidID]
;

RosettaParameter:
	RosettaNamed RosettaTyped (isArray?='[' ']')?
;
// TODO get rid of these
// TODO parameter types and return type should be RosettaBuiltinType (similar to record features)
RosettaLibraryFunction returns RosettaExternalFunction:
	'library' 'function' RosettaNamed '(' (parameters+=RosettaParameter (',' parameters+=RosettaParameter)*)? ')' RosettaTyped RosettaDefinable? 
;

RosettaQualifiedType:
	'qualifiedType' RosettaNamed '{'
		features+=RosettaQualifiedTypeFeature*
	'}'
;

RosettaQualifiedTypeFeature returns RosettaTypedFeature:
	RosettaNamed type=[RosettaBuiltinType|ValidID]
;

RosettaCalculationType:
	'calculationType' RosettaNamed '{'
		features+=RosettaCalculationTypeFeature*
	'}'
;

RosettaCalculationTypeFeature returns RosettaTypedFeature:
	RosettaNamed type=[RosettaBuiltinType|ValidID]
;

/**********************************************************************
 * Data model 
 */ 
// TODO: get rid of this one?
RosettaMetaType:
	'metaType' RosettaNamed RosettaTyped
;

RosettaEnumValue:
	RosettaNamed ('displayName' display=STRING)? RosettaDefinable? References*
	(enumSynonyms += RosettaEnumSynonym)*
;

RosettaCardinality:
	'(' (inf=INT '..' sup=INT | inf=INT '..' unbounded?='*') ')'
;



/**********************************************************************
 * Synonyms 
 */ 

RosettaClassSynonym:
	'[' 'synonym' sources+=[RosettaSynonymSource] (',' sources += [RosettaSynonymSource])*
	 ('value' value=RosettaClassSynonymValue)?
	 ('meta' metaValue = RosettaMetaSynonymValue)?
	 ']'
;

RosettaClassSynonymValue returns RosettaSynonymValueBase:
	name = STRING (refType=RosettaSynonymRef value=INT)?
	('path' path = STRING)? 
;

RosettaSynonym:
	'[' 'synonym' sources+=[RosettaSynonymSource|QualifiedName] (',' sources += [RosettaSynonymSource])*
	body=RosettaSynonymBody
	']'
;

RosettaSynonymBody:
	('value' (values+=RosettaSynonymValue ',')* values+=RosettaSynonymValue (mappingLogic=RosettaMapping)? ('meta' (metaValues += STRING ',')* metaValues += STRING)? 
		| 'hint' (hints+=STRING ',')* hints+=STRING
		| 'merge' merge=RosettaMergeSynonymValue
		| mappingLogic=RosettaMappingSetTo 
		| 'meta' (metaValues += STRING ',')* metaValues += STRING)
	
	('dateFormat' format=STRING)?
	('pattern' patternMatch=STRING patternReplace=STRING)?
	(removeHtml ?= 'removeHtml')?
	('mapper' mapper=STRING)?
;

RosettaSynonymValue returns RosettaSynonymValueBase :
	name = STRING (refType=RosettaSynonymRef value=INT)?
	('path' path = STRING)? 
	('maps' maps=INT)?
;
RosettaMetaSynonymValue  returns RosettaSynonymValueBase :
	name = STRING (refType=RosettaSynonymRef value=INT)?
	('path' path = STRING)? 
	('maps' maps=INT)?
;
RosettaMergeSynonymValue :
	name = STRING ('when' 'path' '<>' excludePath=STRING)?
;

RosettaEnumSynonym:
	/*
	 * The rationale for having a synonym which syntax is distinct for the enumeration
	 * is because it needs to accommodate integer values for FIX while there is no Tag nor ComponentID
	 * an optional definition field has also been added, while the synonymValue is of type STRING to accommodate peculiar values
	 */
	'[' 'synonym' sources+=[RosettaSynonymSource] (',' sources += [RosettaSynonymSource])*  
		'value' synonymValue=STRING ('definition' definition=STRING)?  
		('pattern' patternMatch=STRING patternReplace=STRING)? 
		(removeHtml ?= 'removeHtml')?
	']'
;

enum RosettaSynonymRef:
	tag | componentID
;

/**********************************************************************
 * Mapping Logic - Attribute Synonym
 */

RosettaMapping:
	instances += RosettaMappingInstance (',' instances += RosettaMappingInstance)*
;

RosettaMappingInstance:
	('set' 'when') when=RosettaMappingPathTests
	| (default?='default' 'to') set=RosettaMapPrimaryExpression
;

RosettaMappingSetTo returns RosettaMapping:
	instances += RosettaMappingSetToInstance (',' instances += RosettaMappingSetToInstance)*
;

RosettaMappingSetToInstance returns RosettaMappingInstance:
	('set' 'to') set=RosettaMapPrimaryExpression ('when' when = RosettaMappingPathTests)?
;

RosettaMappingPathTests:
	tests+=RosettaMapTest ('and' tests += RosettaMapTest)*
;

RosettaMapTest:
	RosettaMapPath
	| RosettaMapRosettaPath
	| RosettaMapTestExpression
	| RosettaMapTestFunc
;

RosettaMapPath:
	'path' '=' path=RosettaMapPathValue
;

RosettaMapRosettaPath:
	'rosettaPath' '=' path=RosettaAttributeReference
;

RosettaDataReference returns RosettaAttributeReferenceSegment:
	{RosettaDataReference} data=[Data|QualifiedName]
;

RosettaAttributeReference returns RosettaAttributeReferenceSegment:
	RosettaDataReference ({RosettaAttributeReference.receiver=current} '->' attribute=[Attribute|ValidID])+
;

RosettaMapTestExpression returns RosettaMapTestExpression:
	RosettaMapPathValue (
		{RosettaMapTestExistsExpression.argument=current} 'exists' 
		| {RosettaMapTestAbsentExpression.argument=current} 'is' 'absent'
		| {RosettaMapTestEqualityOperation.left=current} operator=('='|'<>') right=RosettaMapPrimaryExpression
	)
;

RosettaMapPrimaryExpression returns RosettaMapTestExpression:
	EnumValueReference
	| RosettaStringLiteral
	| RosettaBooleanLiteral
	| RosettaIntLiteral
	| RosettaBigDecimalLiteral
;

RosettaMapPathValue:
	path=STRING
;

RosettaMapTestFunc:
	'condition-func' func=[RosettaCallableWithArgs] ('condition-path' predicatePath=RosettaMapPathValue)?
;


/**********************************************************************
 * Things
 */ 
 
RosettaDocReference:
	'[' ('regulatoryReference'|'docReference') docReference=RegulatoryDocumentReference
		(rationales+=DocumentRationale)*
		// @Compat. In DRR, there is a segment `table` located after a `rationale`. This should never be the case, but to remain backwards compatible, we need to allow this.
 		// NOTE: once we get rid of `extraneousSegments`, we can also remove the syntactic predicate `=>` on the segment of rule `RegulatoryDocumentReference`.
 		(extraneousSegments+=RosettaSegmentRef)*
		('structured_provision' structuredProvision=STRING)?
		('provision' provision=STRING)?
		(reportedField?='reportedField')? ']'
;

DocumentRationale:
	  'rationale' rationale=STRING
	& ('rationale_author' rationaleAuthor=STRING)?
;


RosettaBody:
	'body' bodyType=ID RosettaNamed RosettaDefinable?
;

RosettaCorpus:
	'corpus' corpusType=ID (body=[RosettaBody])? (displayName=STRING)? RosettaNamed RosettaDefinable?
;

RosettaSegment:
	'segment' name=(ValidID | 'rationale' | 'rationale_author' | 'structured_provision') // @Compat. These were previously used as `segment`s, but are now considered keywords.
;


/**********************************************************************
 * Expressions 
 */ 

RosettaReferenceOrFunctionCall returns RosettaExpression:
	  {RosettaSymbolReference} symbol=[RosettaSymbol|QualifiedName] (explicitArguments?='(' (args+=RosettaCalcExpression (',' args+=RosettaCalcExpression)*)? ')')?
	| {RosettaImplicitVariable} name=('item' | 'it')
;

RosettaLiteral returns RosettaExpression:
	RosettaBooleanLiteral
	| RosettaStringLiteral
	| RosettaBigDecimalLiteral
	| RosettaIntLiteral
	| EmptyLiteral
	| ListLiteral
;

RosettaBooleanLiteral:
	value?='True' | {RosettaBooleanLiteral} 'False'
;

RosettaStringLiteral:
	value = STRING
;

RosettaBigDecimalLiteral:
	value = BigDecimal
;

RosettaIntLiteral:
	value = Integer
;

BigDecimal hidden():
	('+' | '-')? ('.' INT | INT '.' | INT '.' INT) (('e' | 'E') ('+' | '-') INT | ID)?
;

Integer hidden():
	('+' | '-')? INT
;


/**********************************************************************
 * QualifiableConfiguration
 */
RosettaQualifiableConfiguration:
	qType = RosettaQualifiableType 'root' rosettaClass = [Data|ValidID]';'
;

enum RosettaQualifiableType :
	Event = "isEvent"| Product = "isProduct"
;


/**********************************************************************
 * Function references
 */
ClosureParameter:
	name = ID
;

InlineFunction:
	=>((parameters+=ClosureParameter (',' parameters += ClosureParameter)*)? '[') body=RosettaCalcExpression ']'
;

ImplicitInlineFunction returns InlineFunction:
	body=RosettaCalcOr
;

/**********************************************************************
 * Calculations
 */

RosettaCalcExpressionWithAsKey returns RosettaExpression:
	RosettaCalcExpression =>({AsKeyOperation.argument=current} operator='as-key')?
;

RosettaCalcExpression returns RosettaExpression:
	ThenOperation
;

ThenOperation returns RosettaExpression:
	RosettaCalcOr (=>({ThenOperation.argument=current} operator='then') (function=InlineFunction|=>function=ImplicitInlineFunction)?)*
;

/*
 * Binary operations
 */
enum CardinalityModifier:
	  ANY = 'any'
	| ALL = 'all'
;

RosettaCalcOr returns RosettaExpression:
	RosettaCalcAnd ( =>({LogicalOperation.left=current} operator='or') right=RosettaCalcAnd)*
	// Without left parameter:
	| ->({LogicalOperation} operator='or' right=RosettaCalcAnd) (=>({LogicalOperation.left=current} operator='or') right=RosettaCalcAnd)*
;

RosettaCalcAnd returns RosettaExpression:
	RosettaCalcEquality ( =>({LogicalOperation.left=current} operator='and') right=RosettaCalcEquality)*
	// Without left parameter:
	| (->({LogicalOperation} operator='and' right=RosettaCalcEquality) (=>({LogicalOperation.left=current} operator='and') right=RosettaCalcEquality)*)
;

RosettaCalcEquality returns RosettaExpression:
	RosettaCalcComparison ( =>({EqualityOperation.left=current} (cardMod=CardinalityModifier)? operator=('='|'<>')) right=RosettaCalcComparison)*
	// Without left parameter:
	| (->({EqualityOperation} (cardMod=CardinalityModifier)? operator=('='|'<>') right=RosettaCalcComparison) (=>({EqualityOperation.left=current} (cardMod=CardinalityModifier)? operator=('='|'<>')) right=RosettaCalcComparison)*)
;

RosettaCalcComparison returns RosettaExpression:
	RosettaCalcAdditive ( =>({ComparisonOperation.left=current} (cardMod=CardinalityModifier)? operator=(">="|"<="|">"|"<")) right=RosettaCalcAdditive)*
	// Without left parameter:
	| (->({ComparisonOperation} (cardMod=CardinalityModifier)? operator=(">="|"<="|">"|"<") right=RosettaCalcAdditive) (=>({ComparisonOperation.left=current} (cardMod=CardinalityModifier)? operator=(">="|"<="|">"|"<")) right=RosettaCalcAdditive)*)
;

RosettaCalcAdditive returns RosettaExpression:
	RosettaCalcMultiplicative ( =>({ArithmeticOperation.left=current} operator=('+'|'-')) right=RosettaCalcMultiplicative)*
;

RosettaCalcMultiplicative returns RosettaExpression:
	RosettaCalcBinary ( =>({ArithmeticOperation.left=current} operator=('*'|'/')) right=RosettaCalcBinary)*
	// Without left parameter:
	| (->({ArithmeticOperation} operator=('*'|'/') right=RosettaCalcBinary) (=>({ArithmeticOperation.left=current} operator=('*'|'/')) right=RosettaCalcBinary)*)
;

RosettaCalcBinary returns RosettaExpression:
	ListOperation (=>(
		{RosettaContainsExpression.left=current} operator='contains' right=ListOperation
		| {RosettaDisjointExpression.left=current} operator='disjoint' right=ListOperation
		| {JoinOperation.left=current} operator='join' (=>right=ListOperation)?
	))?
	| // Without left parameter:
	(
		->(
			{RosettaContainsExpression} operator='contains' right=ListOperation
			| {RosettaDisjointExpression} operator='disjoint' right=ListOperation
			| {JoinOperation} operator='join' (=>right=ListOperation)?
		)
		(=>(
			{RosettaContainsExpression.left=current} operator='contains' right=ListOperation
			| {RosettaDisjointExpression.left=current} operator='disjoint' right=ListOperation
			| {JoinOperation.left=current} operator='join' (=>right=ListOperation)?
		))?
	)
;

/**
 * List operations
 */
enum ExistsModifier:
	  SINGLE='single'
	| MULTIPLE='multiple'
;

ListOperation returns RosettaExpression:
	RosettaCalcPrimary
	(
		=>(
			 ({RosettaFeatureCall.receiver=current} '->' (=>feature=[RosettaFeature|ValidID])?)
			|({RosettaExistsExpression.argument=current} (modifier=ExistsModifier)? operator='exists')
			|({RosettaAbsentExpression.argument=current} 'is' operator='absent')
			|({RosettaOnlyElement.argument=current} operator='only-element')
			|({RosettaCountOperation.argument=current} operator='count')
			|({FlattenOperation.argument=current} operator='flatten')
			|({DistinctOperation.argument=current} operator='distinct')
			|({ReverseOperation.argument=current} operator='reverse')
			|({FirstOperation.argument=current} operator='first')
			|({LastOperation.argument=current} operator='last')
			|({SumOperation.argument=current} operator='sum')
			|({OneOfOperation.argument=current} operator='one-of')
			|({ChoiceOperation.argument=current} necessity=Necessity operator='choice' attributes+=[Attribute|ValidID] =>(',' attributes+=[Attribute|ValidID])*)
		)
		| =>(
			({SortOperation.argument=current} operator='sort')
			|({MinOperation.argument=current} operator='min')
			|({MaxOperation.argument=current} operator='max')
		) (function=InlineFunction)?
		| =>(
			 ({ReduceOperation.argument=current} operator='reduce')
			|({FilterOperation.argument=current} operator='filter')
			// @Compat: remove `map`
			|({MapOperation.argument=current} operator=('map' | 'extract'))
		) (function=InlineFunction|=>function=ImplicitInlineFunction)?
	)*
	| // Without left parameter:
	(
		(
			 ({RosettaExistsExpression} (modifier=ExistsModifier)? operator='exists')
			|({RosettaAbsentExpression} 'is' operator='absent')
			|({RosettaOnlyElement} operator='only-element')
			|({RosettaCountOperation} operator='count')
			|({FlattenOperation} operator='flatten')
			|({DistinctOperation} operator='distinct')
			|({ReverseOperation} operator='reverse')
			|({FirstOperation} operator='first')
			|({LastOperation} operator='last')
			|({SumOperation} operator='sum')
			|({OneOfOperation} operator='one-of')
			|({ChoiceOperation} necessity=Necessity operator='choice' attributes+=[Attribute|ValidID] =>(',' attributes+=[Attribute|ValidID])*)
		)
		| (
			({SortOperation} operator='sort')
			|({MinOperation} operator='min')
			|({MaxOperation} operator='max')
		) (function=InlineFunction)?
		| (
			 ({ReduceOperation} operator='reduce')
			|({FilterOperation} operator='filter')
			// @Compat: remove `map`
			|({MapOperation} operator=('map' | 'extract'))
		) (function=InlineFunction|=>function=ImplicitInlineFunction)?
	)
	(
		=>(
			 ({RosettaFeatureCall.receiver=current} '->' (=>feature=[RosettaFeature|ValidID])?)
			|({RosettaExistsExpression.argument=current} (modifier=ExistsModifier)? operator='exists')
			|({RosettaAbsentExpression.argument=current} 'is' operator='absent')
			|({RosettaOnlyElement.argument=current} operator='only-element')
			|({RosettaCountOperation.argument=current} operator='count')
			|({FlattenOperation.argument=current} operator='flatten')
			|({DistinctOperation.argument=current} operator='distinct')
			|({ReverseOperation.argument=current} operator='reverse')
			|({FirstOperation.argument=current} operator='first')
			|({LastOperation.argument=current} operator='last')
			|({SumOperation.argument=current} operator='sum')
			|({OneOfOperation.argument=current} operator='one-of')
			|({ChoiceOperation.argument=current} necessity=Necessity operator='choice' attributes+=[Attribute|ValidID] =>(',' attributes+=[Attribute|ValidID])*)
		)
		| =>(
			({SortOperation.argument=current} operator='sort')
			|({MinOperation.argument=current} operator='min')
			|({MaxOperation.argument=current} operator='max')
		) (function=InlineFunction)?
		| =>(
			 ({ReduceOperation.argument=current} operator='reduce')
			|({FilterOperation.argument=current} operator='filter')
			// @Compat: remove `map`
			|({MapOperation.argument=current} operator=('map' | 'extract'))
		) (function=InlineFunction|=>function=ImplicitInlineFunction)?
	)*
;

/**
 * Primary operations
 */
RosettaCalcPrimary returns RosettaExpression:
	RosettaCalcConditionalExpression
	| RosettaReferenceOrFunctionCall
	| RosettaLiteral
	| '(' RosettaCalcExpression ')'
	| RosettaCalcOnlyExists
;

RosettaCalcConditionalExpression returns RosettaExpression:
	 {RosettaConditionalExpression} 'if' if=RosettaCalcOr 'then' ifthen=RosettaCalcOr (=>full?='else' elsethen=RosettaCalcOr)?
;

RosettaCalcOnlyExists returns RosettaExpression:
	{RosettaOnlyExistsExpression} (args+=RosettaOnlyExistsElement | ('(' args+=RosettaOnlyExistsElement (',' args+=RosettaOnlyExistsElement)* ')')) 'only' 'exists'
;

RosettaOnlyExistsElement returns RosettaExpression:
	RosettaOnlyExistsElementRoot ({RosettaFeatureCall.receiver=current} '->' feature=[RosettaFeature|ValidID])*
;

RosettaOnlyExistsElementRoot returns RosettaSymbolReference:
	{RosettaSymbolReference} symbol=[RosettaSymbol|QualifiedName]
;

/*****************************************
 * Translate external synonym and rule support
 *****************************************/

fragment ExternalAnnotationSource:
	'{'
	    (externalRefs+=RosettaExternalClass)*
	    ('enums' (externalRefs+=RosettaExternalEnum)*)?
	'}'
;
// @Compat: move common parts to `ExternalAnnotationSource` once `RosettaSynonymSource` is removed.
RosettaExternalSynonymSource:
		'synonym' 'source' RosettaNamed ('extends' superSources+=[RosettaSynonymSource]  (',' superSources+=[RosettaSynonymSource])* )?
		ExternalAnnotationSource
;

RosettaExternalRuleSource:
		'rule' 'source' RosettaNamed ('extends' superSources+=[RosettaExternalRuleSource]  (',' superSources+=[RosettaExternalRuleSource])* )?
		ExternalAnnotationSource
;

RosettaExternalClass:
	typeRef=[Data] ':'
		(externalClassSynonyms += RosettaExternalClassSynonym)*
		(regularAttributes += RosettaExternalRegularAttribute)*
;

RosettaExternalEnum:
	typeRef = [RosettaEnumeration] ':'
		(regularValues += RosettaExternalEnumValue)*
;

enum ExternalValueOperator:
	PLUS='+'
	| MINUS='-'
;

RosettaExternalRegularAttribute:
	operator=ExternalValueOperator attributeRef=[RosettaFeature|ValidID]
		externalSynonyms+=RosettaExternalSynonym*
		externalRuleReferences+=RosettaRuleReference*
;

RosettaExternalEnumValue: 
	operator=ExternalValueOperator enumRef=[RosettaEnumValue]
		externalEnumSynonyms += RosettaExternalEnumSynonym*
;

RosettaExternalClassSynonym:
	'['
	('value' value=RosettaClassSynonymValue)?
	'meta' metaValue = RosettaMetaSynonymValue
	']'
;

RosettaExternalSynonym:
	'['
	body=RosettaSynonymBody
	']'
;

RosettaExternalEnumSynonym returns RosettaEnumSynonym:
	'['
	'value' synonymValue=STRING ('definition' definition=STRING)?
	('pattern' patternMatch=STRING patternReplace=STRING)?
	']'
;


/*****************************************
 * Reporting support
 *****************************************/

RegulatoryDocumentReference:
	body=[RosettaBody|ValidID] corpuses+=([RosettaCorpus|ValidID])+ (=>segments+=RosettaSegmentRef)*
;

RosettaSegmentRef:
	segment=[RosettaSegment|ValidID] segmentRef=STRING
;

/*****************************************
 * Blueprints
 */
 
RosettaBlueprintReport:
	'report' regulatoryBody=RegulatoryDocumentReference
	'in' ('real-time'|'T+1'|'T+2'|'T+3'|'T+4'|'T+5'|'ASATP')
	'when'
	eligibilityRules+=[RosettaBlueprint] ( 'and' eligibilityRules+=[RosettaBlueprint])*
	('using' 'standard' reportingStandard=[RosettaCorpus])? // @Compat: this attribute is unnecessary
	'with' 'type' reportType=[Data|QualifiedName]
	('with' 'source' ruleSource=[RosettaExternalRuleSource])?
;

RosettaRuleReference:
	'[' 'ruleReference' reportingRule=[RosettaBlueprint] ']'	
;

// @Compat: make ':' mandatory at January 16
RosettaBlueprint:
 	('reporting'|'eligibility') 'rule' RosettaNamed ':'? RosettaDefinable?
	(references += RosettaDocReference)*
	(nodes = BlueprintNodeExp)?
	('output' output=[Data])? // TODO: I don't think this is ever used...
;

BlueprintNodeExp:
	node=BlueprintNode (reference=RosettaDocReference)?
	('then' next=BlueprintNodeExp)?
	(=>'as' identifier=STRING)?
;

BlueprintNode:
	BlueprintRef |
	BlueprintFilter |
	BlueprintOr |
	BlueprintExtract |
	BlueprintReturn | 
	BlueprintLookup
;

BlueprintFilter :
	'filter' 'when' (filter=RosettaCalcOr | 'rule' filterBP=BlueprintRef)
;

BlueprintOr:
	'(' bps+=BlueprintNodeExp ( ',' bps+=BlueprintNodeExp)* ')'
;

BlueprintRef:
	blueprint=[RosettaBlueprint]
;

BlueprintExtract:
	'extract' (repeatable?='repeatable')? call=RosettaCalcOr 
;

BlueprintReturn:
	'return' expression=RosettaCalcOr
;

BlueprintLookup:
	'lookup' name=ID output=[RosettaType]
;
