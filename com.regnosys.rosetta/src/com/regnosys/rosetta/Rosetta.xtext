grammar com.regnosys.rosetta.Rosetta with org.eclipse.xtext.common.Terminals
import "http://www.rosetta-model.com/Rosetta"
import "http://www.rosetta-model.com/RosettaSimple"
import "http://www.rosetta-model.com/RosettaExpression"

RosettaModel:
	'namespace' name=(QualifiedName | STRING) (->':' doc=Definition)?
	
	(=>'version' version=STRING)?
	
	playground=Playground
;

QualifiedName:
	ID (->'.' ID)*
;

Definition hidden():
	'<'definition=STRING'>'
;

Playground:
	{Playground} (elements+=PlaygroundElement)*
;

PlaygroundElement:
	=>Definition
	| =>PlaygroundRequest
	| Keyword
	| =>Literal
	| Identifier
;

PlaygroundRequest:
	'<' (
		  {OnRequest} =>type=RequestType 'on' location=PlaygroundLocation
		| {RangeRequest} =>type=RequestType
		  'from' from=PlaygroundLocation 'to' to=PlaygroundLocation
	) content=STRING '>'
;

PlaygroundLocation:
	value=STRING (n=INT)? direction=Direction
;

enum RequestType:
	  ERROR
	| WARNING
	| INFO
	| INLAY
;

enum Direction:
	  BACK='back'
	| NEXT='next'
;

Identifier:
	value=ID
;

BigDecimal:
	'-'? (INT | INT '.' INT) SCIENTIFIC?
;
terminal SCIENTIFIC:
    ('e' | 'E') ('+' | '-')? ('0'..'9')+
;

Literal:
	value=STRING
	| value=BigDecimal
;

Keyword:
	value=
	( 'import'
	| 'annotation'
	| ':'
	| '['
	| 'prefix'
	| ']'
	| 'type'
	| 'extends'
	| 'override'
	| 'enum'
	| 'func'
	| '('
	| ')'
	| 'inputs'
	| 'output'
	| 'alias'
	| 'condition'
	| 'choice'
	| ','
	| 'optional'
	| 'required'
	| 'one-of'
	| 'post-condition'
	| 'assign-output'
	| 'as-key'
	| 'set'
	| 'add'
	| '->'
	| 'empty'
	| 'key'
	| 'source'
	| 'value'
	| 'version'
	| 'workflow'
	| 'basicType'
	| 'recordType'
	| '{'
	| '}'
	| 'library'
	| 'function'
	| 'qualifiedType'
	| 'calculationType'
	| 'metaType'
	| 'displayName'
	| '..'
	| 'synonym'
	| 'meta'
	| 'path'
	| 'hint'
	| 'merge'
	| 'dateFormat'
	| 'pattern'
	| 'removeHtml'
	| 'mapper'
	| 'maps'
	| 'when'
	| '<>'
	| 'definition'
	| 'tag'
	| 'componentID'
	| 'default'
	| 'to'
	| 'and'
	| '='
	| 'rosettaPath'
	| 'exists'
	| 'is'
	| 'absent'
	| 'regulatoryReference'
	| 'docReference'
	| 'provision'
	| 'reportedField'
	| 'body'
	| 'corpus'
	| 'segment'
	| 'item' | 'it'
	| 'True'
	| 'False'
	| 'root'
	| ';'
	| 'isEvent'
	| 'isProduct'
	| 'any'
	| 'all'
	| 'or'
	| ">="|"<="|">"|"<"
	| '+'|'-'|'*'|'/'
	| 'contains'|'disjoint'|'join'
	| 'single'
	| 'multiple'
	| 'only-element'|'count'|'flatten'|'distinct'|'reverse'|'first'|'last'|'sum'
	| 'reduce'|'filter'|'map'|'extract'|'extract-all'|'sort'|'min'|'max'
	| 'if'|'then'|'else'
	| 'only'
	| 'enums'
	| 'from'
	| 'report'|'in'|'real-time'|'T+1'|'T+2'|'T+3'|'T+4'|'T+5'|'ASATP'|'using'|'standard'|'with'
	| 'ruleReference'|'reporting'|'eligibility'|'rule'|'as'
	| 'repeatable'|'return'|'lookup'
	| '?'
	)
;
