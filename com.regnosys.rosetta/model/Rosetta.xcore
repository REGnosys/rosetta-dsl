@Ecore(nsURI="http://www.rosetta-model.com/Rosetta")
@GenModel(fileExtensions="rosetta", modelDirectory="/com.regnosys.rosetta/emf-gen", operationReflection="false",
	copyrightText="Copyright (c) REGnosys 2017 (www.regnosys.com)", forceOverwrite="true", updateClasspath="false",
	complianceLevel="8.0")
package com.regnosys.rosetta.rosetta

import java.util.stream.Collectors
import com.regnosys.rosetta.rosetta.simple.Annotated

class RosettaModel extends RosettaDefinable {
	String name
	String version = "0.0.0"
	contains Import[] imports
	contains RosettaQualifiableConfiguration[] configurations opposite model 
	contains RosettaRootElement[] elements opposite model
	
}

class Import {
	String importedNamespace
}
/**
 * New model
 */

/**********************************************************************
 * Common types
 */

abstract class RosettaDefinable {
	String definition
}

abstract class RosettaNamed {
	String name
}

interface RosettaTyped {
	refers RosettaType ^type
		
	derived boolean isTypeInferred get {
		return ^type === null
	}
}

abstract class WithCardinality {
	contains RosettaCardinality card
}

class RosettaFeature extends RosettaNamed {
	/**
	 * @return The name or 'value' if it's <code>null</code>
	 */
	derived String getNameOrDefault get {
		return name ?: 'value'
	}

}

class RosettaTypedFeature extends RosettaFeature, RosettaTyped {}

abstract class RosettaCallable extends RosettaNamed {}

interface RosettaCallableWithArgs extends RosettaNamed{
}

interface RosettaRootElement {
	container RosettaModel model opposite elements
}

abstract class RosettaFeatureOwner extends RosettaDefinable {
	contains RosettaTypedFeature[] features
}

abstract class RosettaType extends RosettaRootElement, RosettaNamed {
}



/**********************************************************************
 * Built-in
 */

abstract class RosettaBuiltinType extends RosettaType {
}

class RosettaBasicType extends RosettaRootElement , RosettaBuiltinType {
}

class RosettaSynonymSource extends RosettaRootElement , RosettaNamed {
}

class RosettaRecordType extends RosettaRootElement, RosettaFeatureOwner, RosettaBuiltinType, RosettaCallableWithArgs {
}

class RosettaExternalFunction extends RosettaRootElement, RosettaTyped, RosettaCallableWithArgs, RosettaBuiltinType , RosettaDefinable {
	contains RosettaParameter[] parameters
}

class RosettaParameter extends RosettaTypedFeature {
	boolean isArray
}


class RosettaQualifiedType extends RosettaRootElement, RosettaFeatureOwner, RosettaBuiltinType, RosettaCallableWithArgs {
}

class RosettaCalculationType extends RosettaRootElement, RosettaFeatureOwner, RosettaBuiltinType, RosettaCallableWithArgs {
}


/**********************************************************************
 * Data model
 */

class RosettaClass extends RosettaRootElement, RosettaFeatureOwner, RosettaType, RosettaCallable {
	boolean ^abstract
	boolean root
	boolean oneOf
	boolean globalKey
	
	refers RosettaClass superType
	contains RosettaStereotype stereotype
	contains RosettaClassSynonym[] synonyms
	contains RosettaRegulatoryReference[] references
	contains RosettaMarketPractice[] marketPractice
	
	op RosettaRegularAttribute[] getRegularAttributes() {
		features.filter(RosettaRegularAttribute).toEList
	}
}

class RosettaMetaType extends RosettaRootElement, RosettaTypedFeature {
	
}

class RosettaRegularAttribute extends RosettaTypedFeature, RosettaDefinable, WithCardinality {
	contains RosettaRegulatoryReference[] references
	contains RosettaMarketPractice[] marketPractice
	contains RosettaSynonym[] synonyms
	refers RosettaMetaType[] metaTypes
}


class RosettaStereotype {
	refers RosettaStereotypeValue[] values
}

class RosettaStereotypeValue extends RosettaRootElement, RosettaNamed {
}

class RosettaEnumeration extends RosettaRootElement, RosettaType, RosettaDefinable, RosettaCallable {
	refers RosettaEnumeration superType
	contains RosettaSynonym[] synonyms
	contains RosettaEnumValue[] enumValues opposite enumeration
}

class RosettaEnumValue extends RosettaNamed, RosettaDefinable , RosettaFeature {
	String display
	contains RosettaEnumSynonym[] enumSynonyms
	container RosettaEnumeration enumeration opposite enumValues
	
	refers RosettaType ^type get {
		return enumeration
	}
}

class RosettaCardinality {
	int inf
	int sup
	boolean unbounded
	
	derived boolean isMany get {
		unbounded || sup > 1 || sup != 1 // ??? sup of 0 is counted as multiple
	}
	derived boolean isOptional get{
		inf == 0
	}
	
	/**
	 * The (0..0) cardinality reflects the fact that there is no object available.
	 * This is expected to change once the CDM scope is extended to the pre-execution space.
	 */
	derived boolean isHidden get{
		inf == 0 && sup == 0
	}
}


/**********************************************************************
 * Synonyms
 */

abstract class RosettaSynonymBase {

	refers RosettaSynonymSource[] sources
}

class RosettaSynonymValueBase {
	String name
	RosettaSynonymRef refType
	int value
	String path
	int maps
}

class RosettaClassSynonym extends RosettaSynonymBase {
	contains RosettaSynonymValueBase value
	contains RosettaSynonymValueBase metaValue
}

class RosettaSynonym extends RosettaSynonymBase {
	contains RosettaSynonymBody body
}

class RosettaSynonymBody extends RosettaSynonymBase {
	contains RosettaSynonymValueBase[] values
	contains RosettaMapping mappingLogic
	String[] hints
	String[] metaValues
	String mapper
	String format
	String patternMatch
	String patternReplace
}

class RosettaEnumSynonym extends RosettaSynonymBase, RosettaDefinable {
	String synonymValue
	String patternMatch
	String patternReplace
}

enum RosettaSynonymRef {
	tag
	componentID = 1
}


/**********************************************************************
 * Things
 */

class RosettaRegulatoryReference extends RosettaRegulatoryMandate {
	String provision
	contains RosettaSegmentRef[] segments
	boolean reportedField
}

class RosettaSegmentRef {
	refers RosettaSegment segment
	String segmentRef
}

class RosettaRegulatoryMandate {
	refers RosettaRegulatoryRegime regRegime
	refers RosettaMandate[] mandates
}

class RosettaRegulatoryRegime extends RosettaRootElement, RosettaNamed, RosettaDefinable {
	String bodyType
}

class RosettaMandate extends RosettaRootElement, RosettaNamed, RosettaDefinable {
	String corpusType
}

class RosettaSegment extends RosettaRootElement, RosettaNamed {
}

class RosettaMarketPractice {
	refers RosettaOrganisation organisation
	String document
	String recommendation
}

class RosettaOrganisation extends RosettaRootElement, RosettaNamed {
}

/**********************************************************************
 * Expressions
 */

abstract class RosettaExpression {
}

class RosettaCallableCall extends RosettaExpression {
	boolean toOne
	refers RosettaCallable callable
}

class RosettaEnumValueReference extends RosettaExpression {
	refers RosettaEnumeration enumeration
	refers RosettaEnumValue value
}

abstract class RosettaLiteral extends RosettaExpression, RosettaTyped {
	op String stringValue()
}

class RosettaBooleanLiteral extends RosettaLiteral {
	boolean value
	
	op String stringValue() {
		return Boolean.toString(value)
	}
}

class RosettaStringLiteral extends RosettaLiteral {
	String value
	op String stringValue() {
		return '"' + value + '"'
	}
}

class RosettaBigDecimalLiteral extends RosettaLiteral {
	String value
	op String stringValue() {
		return value
	}
}

class RosettaIntLiteral extends RosettaLiteral {
	String value
	op String stringValue() {
		return value
	}
}

class RosettaParenthesisCalcExpression extends RosettaExpression{
	contains RosettaExpression expression
}


/**********************************************************************
 * Data rule
 */

class RosettaDataRule extends RosettaRootElement, RosettaNamed, RosettaDefinable {
	contains RosettaRegulatoryReference[] references
	contains RosettaMarketPractice[] marketPractice
	contains RosettaExpression when
	contains RosettaExpression then
}



/**********************************************************************
 * Workflow rule
 */

class RosettaWorkflowRule extends RosettaRootElement, RosettaNamed, RosettaDefinable {
	contains RosettaMarketPractice[] marketPractice
	contains RosettaExpression when
	contains RosettaTreeNode root
	contains RosettaExpression data
	refers RosettaTypedFeature commonIdentifier
	contains RosettaExpression commonIdPath
}

class RosettaTreeNode {
	refers RosettaType parent
	boolean not
	contains RosettaTreeNode[] children
}



/**********************************************************************
 * Mappings
 */

class RosettaMapping {
	contains RosettaMappingInstance[] instances
}

class RosettaMappingInstance {
	contains RosettaExpression ^set
	contains RosettaMappingPathTests when
	boolean ^default
}

class RosettaMappingPathTests {
	contains RosettaExpression[] tests
}

class RosettaMapPath extends RosettaExpression {
	contains RosettaExpression path
}

class RosettaMapRosettaPath extends RosettaExpression {
	contains RosettaExpression path
}

class RosettaMapPathValue extends RosettaExpression {
	String path
}

/**********************************************************************
 * Choice rule
 */

class RosettaChoiceRule extends RosettaRootElement, RosettaNamed, RosettaDefinable {
	contains RosettaRegulatoryReference[] references
	contains RosettaMarketPractice[] marketPractice
	refers RosettaClass scope
	String qualifier
	refers RosettaRegularAttribute thisOne
	refers RosettaRegularAttribute[] thatOnes
}

/**********************************************************************
 * Alias
 */

class RosettaAlias extends RosettaRootElement, RosettaDefinable, RosettaCallable {
	contains RosettaExpression expression
}

/**********************************************************************
 * Qualifiable used for RosettaProduct and RosettaEvent. Check enum RosettaQualifiableType when adding new classes
 */
 
class RosettaQualifiable extends RosettaRootElement, RosettaNamed, RosettaDefinable {
	contains RosettaExpression expression
	refers RosettaDataRule[] andDataRules	
	refers RosettaDataRule[] orDataRules
}

class RosettaQualifiableConfiguration {
	RosettaQualifiableType qType
	refers RosettaModel model opposite configurations
	/* TODO Change type to Data after migration is finished */
	refers RosettaType rosettaClass
	
}

enum RosettaQualifiableType {
	None, Event, Product
}

/**********************************************************************
 * Products
 */

class RosettaProduct extends RosettaQualifiable {
	contains RosettaSynonym[] synonyms
}

/**********************************************************************
 * Events
 */

class RosettaEvent extends RosettaQualifiable {
	contains RosettaSynonym[] synonyms
}

/**********************************************************************
 * Calculations
 */
 
 /*
  * class RosettaExternalFunction extends RosettaRootElement, RosettaTyped, RosettaFeatureOwner, RosettaCallableWithArgs, RosettaBuiltinType{
	contains RosettaParameter[] parameters
	boolean library
}
  */
 


class RosettaWhenClause {
	contains RosettaExpression when
	contains RosettaExpression call
}

class RosettaBinaryOperation extends RosettaExpression {
	contains RosettaExpression left
	String operator
	contains RosettaExpression right
}

class RosettaExistsExpression extends RosettaExpression {
	contains RosettaExpression argument
	boolean only
	boolean single
	boolean multiple
}

class RosettaAbsentExpression extends RosettaExpression {
	contains RosettaExpression argument
}

class RosettaContainsExpression extends RosettaExpression {
	contains RosettaExpression ^container
	contains RosettaExpression contained
}

class RosettaWhenPresentExpression extends RosettaExpression {
	contains RosettaExpression left
	String operator
	contains RosettaExpression right
}

class RosettaGroupByFeatureCall extends RosettaExpression {
	contains RosettaExpression call
	contains RosettaGroupByExpression groupBy
}

class RosettaGroupByExpression {
	refers RosettaTypedFeature attribute
	contains RosettaGroupByExpression right
}

class RosettaFeatureCall extends RosettaExpression {
	boolean toOne
	contains RosettaExpression receiver
	refers RosettaFeature feature
}

class RosettaCountOperation extends RosettaExpression {
	contains RosettaExpression argument
}

class RosettaConditionalExpression extends RosettaExpression {
	contains RosettaExpression ^if
	contains RosettaExpression ifthen
	contains RosettaExpression elsethen
}

class RosettaWhenCascadeExpression extends RosettaExpression {
	contains RosettaWhenExpression[] whens
}

class RosettaWhenExpression extends RosettaExpression {
	contains RosettaExpression condition
	contains RosettaExpression then
}

class RosettaCallableWithArgsCall extends RosettaExpression {
	boolean toOne
	refers RosettaCallableWithArgs callable
	contains RosettaExpression[] args
}


/*****************************************
 * Translate external synonym support
 *****************************************/

class RosettaExternalSynonymSource extends RosettaSynonymSource {
	contains RosettaExternalRef[] externalRefs
	refers RosettaSynonymSource superSynonym
	
	op RosettaExternalClass[] getExternalClasses() {
		externalRefs.filter(RosettaExternalClass).toEList
	}
	
	op RosettaExternalEnum[] getExternalEnums() {
		externalRefs.filter(RosettaExternalEnum).toEList
	}
}

class RosettaExternalRef {
	refers RosettaType typeRef
}

class RosettaExternalClass extends RosettaExternalRef {
	contains RosettaExternalClassSynonym[] externalClassSynonyms
	contains RosettaExternalRegularAttribute[] regularAttributes
}

class RosettaExternalEnum extends RosettaExternalRef {
	contains RosettaExternalEnumValue[] regularValues
}

class RosettaExternalRegularAttribute {
	String operator
	refers RosettaFeature attributeRef
	contains RosettaExternalSynonym[] externalSynonyms
}

class RosettaExternalEnumValue {
	String operator
	refers RosettaEnumValue enumRef
	contains RosettaEnumSynonym[] externalEnumSynonyms
}

class RosettaExternalClassSynonym extends RosettaSynonymBase {
	contains RosettaSynonymValueBase value
	contains RosettaSynonymValueBase metaValue
}

class RosettaExternalSynonym {
	contains RosettaSynonymBody body
}

/********************
 * Blueprint - Should be a seperate grammar
 *  */
 
class RosettaBlueprintReport extends RosettaRootElement {
	contains RosettaRegulatoryMandate regulatoryMandate
	refers RosettaBlueprint[] reportingRules
	refers RosettaBlueprint[] eligibilityRules
	refers RosettaMandate reportingStandard
	
	op String name() {
		(regulatoryMandate.regRegime.name.toFirstUpper 
				+ regulatoryMandate.mandates.stream.map[RosettaMandate man | man.name.toFirstUpper].collect(Collectors.joining('_'))).replace(' ', '')
	}
	/**
	* FIXME: Never create Grammar model Instances programmatically.
	* Only needed in Generator, create wrapper objects for that in the BlueprintGenerator!
	*/
	op BlueprintNodeExp nodes() {
		var BlueprintNodeExp currentNodeExpr = null
		var BlueprintNodeExp firstNodeExpr = null
		
		for (eligibilityRule : eligibilityRules) {
			val ref = RosettaFactory.eINSTANCE.createBlueprintRef
			ref.blueprint = eligibilityRule
			ref.name = eligibilityRule.name
			
			var newNodeExpr = RosettaFactory.eINSTANCE.createBlueprintNodeExp
			newNodeExpr.node = ref
			newNodeExpr.node.name = ref.name
						
			if (null === currentNodeExpr) firstNodeExpr = newNodeExpr
			else currentNodeExpr.next = newNodeExpr
				
			currentNodeExpr = newNodeExpr
		}
		
		val andNodeExpr = RosettaFactory.eINSTANCE.createBlueprintNodeExp
		currentNodeExpr.next = andNodeExpr
		
		val node = RosettaFactory.eINSTANCE.createBlueprintAnd
		andNodeExpr.node = node

		node.name = name()
		reportingRules.forEach[
			val ref = RosettaFactory.eINSTANCE.createBlueprintRef
			ref.blueprint = it
			ref.name = it.name
			val rule = RosettaFactory.eINSTANCE.createBlueprintNodeExp
			rule.node = ref
			rule.node.name = ref.name
			node.bps.add(rule)
		]
				
		return firstNodeExpr
	}
}
 
class RosettaBlueprint extends RosettaRootElement, RosettaNamed, RosettaDefinable {
	contains RosettaRegulatoryReference[] references
	contains RosettaMarketPractice[] marketPractice
	contains BlueprintNodeExp nodes
	refers RosettaType output
}

class BlueprintNodeExp {
	contains BlueprintNode node
	contains RosettaRegulatoryReference reference
	contains BlueprintNodeExp next 
}

abstract class BlueprintNode {
	String name
	refers RosettaType input
	refers RosettaType output
	refers RosettaType inputKey
	refers RosettaType outputKey
}

class BlueprintSource extends BlueprintNode{}

class BlueprintValidate extends BlueprintNode{}

class BlueprintAnd extends BlueprintNode{
	contains BlueprintNodeExp[] bps
}

class BlueprintMerge extends BlueprintNode {
}

class BlueprintCustomNode extends BlueprintNode {
}

class BlueprintReduce extends BlueprintNode {
	String action
	contains RosettaExpression expression
}

class BlueprintOneOf extends BlueprintNode {
	contains BlueprintIfThen[] bps
	contains BlueprintNodeExp elseNode
}

class BlueprintIfThen {
	contains BlueprintNodeExp ifNode
	contains BlueprintNodeExp thenNode
}

class UnimplementedNode extends BlueprintNode {
}

class BlueprintRef extends BlueprintNode {
	refers RosettaBlueprint blueprint
}

class BlueprintFilter extends BlueprintNode {
	contains RosettaExpression filter
	contains BlueprintRef filterBP
}

class BlueprintExtract extends BlueprintNode {
	contains RosettaExpression call
	String identifier
	boolean multiple
}

class BlueprintReturn extends BlueprintNode {
	contains RosettaExpression expression
	String identifier
}

class BlueprintGroup extends BlueprintNode {
	contains RosettaExpression key
}

class BlueprintDataJoin extends BlueprintNode {
	contains RosettaExpression key
	contains RosettaExpression foreign
}

class BlueprintLookup extends BlueprintNode {
	String identifier	
}

