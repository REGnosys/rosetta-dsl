package com.regnosys.rosetta.generator.util

import org.eclipse.xtext.generator.IFileSystemAccess2

/**
 * Generator provides backward compatibility for models stuck on earlier model versions.
 */
class BackwardCompatibilityGenerator {
	
	def generate(IFileSystemAccess2 fsa) {
		fsa.generateFile('com/rosetta/model/lib/mapper/MapperUtils.java',
			'''
			package com.rosetta.model.lib.mapper;
			
			import java.util.function.Supplier;
			import com.rosetta.model.lib.expression.ComparisonResult;
			
			public class MapperUtils {
				
				/**
				 * Used when generating code for nested if statements
				 */
				public static <T> Mapper<T> fromBuiltInType(Supplier<Mapper<T>> supplier) {
					return supplier.get();
				}
			
				/**
				 * Used when generating code for nested if statements
				 */
				public static <T> Mapper<? extends T> fromDataType(Supplier<Mapper<? extends T>> supplier) {
					return supplier.get();
				}
			
				public static ComparisonResult toComparisonResult(Mapper<Boolean> mapper) {
					if (mapper instanceof ComparisonResult) {
						return (ComparisonResult) mapper;
					} else {
						return mapper.getMulti().stream().allMatch(Boolean::booleanValue) ? ComparisonResult.success() : ComparisonResult.failure("");
					}
				}
			}
			''')
			
		fsa.generateFile('com/rosetta/model/lib/expression/CardinalityOperator.java',
			'''
			package com.rosetta.model.lib.expression;
			
			/**
			 * Generated by com.regnosys.rosetta.generator.util.BackwardCompatabilityGenerator.java.
			 * Provide compatibility for CDM versions before 2.111.0 (which uses DSL version 4.9.1).
			 * Can be removed once all model CDM versions have been updated to 2.111.0.
			 */
			public enum CardinalityOperator {
				All,
				Any
			}
			''')
			
		fsa.generateFile('com/rosetta/model/lib/functions/ModelObjectValidator.java',
			'''
			package com.rosetta.model.lib.functions;
			
			import java.util.List;
			
			import com.google.inject.ImplementedBy;
			import com.rosetta.model.lib.RosettaModelObject;
			
			@ImplementedBy(NoOpModelObjectValidator.class)
			public interface ModelObjectValidator {
			
				/**
				 * Runs validation and collects errors. Implementation may throw an exception if validation fails.
				 * 
				 * @param <T>
				 * @param clazz
				 * @param object
				 * @throws ModelObjectValidationException if validation fails
				 */
				<T extends RosettaModelObject> void validate(Class<T> clazz, T object);
			
				/**
				 * Runs validation and collects errors. Implementation may throw an exception if validation fails.
				 * 
				 * @param <T>
				 * @param clazz
				 * @param objects
				 * @throws ModelObjectValidationException if validation fails
				 */
				<T extends RosettaModelObject> void validate(Class<T> clazz, List<? extends T> objects);
			
			
				class ModelObjectValidationException extends RuntimeException {
					
					private final String errors;
			
					public ModelObjectValidationException(String errors) {
						super(errors);
						this.errors = errors;
					}
			
					public String getErrors() {
						return errors;
					}
				}
			}
			''')
			
		fsa.generateFile('com/rosetta/model/lib/functions/NoOpModelObjectValidator.java',
			'''
			package com.rosetta.model.lib.functions;
			
			import java.util.List;
			
			import com.rosetta.model.lib.RosettaModelObject;
			
			public class NoOpModelObjectValidator implements ModelObjectValidator {
			
				@Override
				public <T extends RosettaModelObject> void validate(Class<T> clazz, T object) {
					// do nothing
				}
			
				@Override
				public <T extends RosettaModelObject> void validate(Class<T> clazz, List<? extends T> objects) {
					// do nothing
				}
			
			}

			''')
			
		fsa.generateFile('com/rosetta/model/lib/functions/ConditionValidator.java',
			'''
			package com.rosetta.model.lib.functions;
			
			import java.util.function.Supplier;
			
			import com.google.inject.ImplementedBy;
			import com.rosetta.model.lib.expression.ComparisonResult;
			
			/**
			 * Generated by com.regnosys.rosetta.generator.util.BackwardCompatabilityGenerator.java.
			 * Provide compatibility for CDM versions before 2.175.0 (which uses DSL version 4.42.0).
			 * Can be removed once all model CDM versions have been updated to 2.175.0.
			 */
			@ImplementedBy(DefaultConditionValidator.class)
			public interface ConditionValidator {
			
				/**
				 * Evaluates conditions. Implementation may throw an exception if condition fails.
				 * 
				 * @param condition
				 * @param description
				 * @throws ConditionException if condition fails
				 */
			    void validate(Supplier<ComparisonResult> condition, String description);
			
			
			    class ConditionException extends RuntimeException {
			
			        public ConditionException(String message) {
			            super(message);
			        }
			
			        public ConditionException(String message, Throwable cause) {
			            super(message, cause);
			        }
			    }
			}
			''')
			
		fsa.generateFile('com/rosetta/model/lib/functions/DefaultConditionValidator.java',
			'''
			package com.rosetta.model.lib.functions;
			
			import java.util.function.Supplier;
			
			import com.rosetta.model.lib.expression.ComparisonResult;
			
			/**
			 * Generated by com.regnosys.rosetta.generator.util.BackwardCompatabilityGenerator.java.
			 * Provide compatibility for CDM versions before 2.175.0 (which uses DSL version 4.42.0).
			 * Can be removed once all model CDM versions have been updated to 2.175.0.
			 */
			public class DefaultConditionValidator implements ConditionValidator {
			    @Override
			    public void validate(Supplier<ComparisonResult> condition, String description) {
			        if (!condition.get().get()) {
			            throw new ConditionException(description);
			        }
			    }
			}
			''')
	}
}