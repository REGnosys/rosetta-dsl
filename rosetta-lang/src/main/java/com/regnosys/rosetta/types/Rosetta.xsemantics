system com.regnosys.rosetta.typing.RosettaTyping

validatorExtends AbstractDeclarativeValidator

import com.regnosys.rosetta.rosetta.RosettaBuiltinType
import com.regnosys.rosetta.rosetta.RosettaCardinality
import com.regnosys.rosetta.rosetta.RosettaEnumValue
import com.regnosys.rosetta.rosetta.RosettaEnumeration
import com.regnosys.rosetta.rosetta.RosettaExternalFunction
import com.regnosys.rosetta.rosetta.RosettaPackage
import com.regnosys.rosetta.rosetta.RosettaTypedFeature
import com.regnosys.rosetta.rosetta.expression.ArithmeticOperation
import com.regnosys.rosetta.rosetta.expression.CardinalityModifier
import com.regnosys.rosetta.rosetta.expression.ClosureParameter
import com.regnosys.rosetta.rosetta.expression.ComparisonOperation
import com.regnosys.rosetta.rosetta.expression.EqualityOperation
import com.regnosys.rosetta.rosetta.expression.ExpressionPackage
import com.regnosys.rosetta.rosetta.expression.ListLiteral
import com.regnosys.rosetta.rosetta.expression.LogicalOperation
import com.regnosys.rosetta.rosetta.expression.ModifiableBinaryOperation
import com.regnosys.rosetta.rosetta.expression.RosettaAbsentExpression
import com.regnosys.rosetta.rosetta.expression.RosettaNumberLiteral
import com.regnosys.rosetta.rosetta.expression.RosettaBinaryOperation
import com.regnosys.rosetta.rosetta.expression.RosettaBooleanLiteral
import com.regnosys.rosetta.rosetta.expression.RosettaConditionalExpression
import com.regnosys.rosetta.rosetta.expression.RosettaCountOperation
import com.regnosys.rosetta.rosetta.expression.RosettaExistsExpression
import com.regnosys.rosetta.rosetta.expression.RosettaExpression
import com.regnosys.rosetta.rosetta.expression.RosettaFeatureCall
import com.regnosys.rosetta.rosetta.expression.RosettaFunctionalOperation
import com.regnosys.rosetta.rosetta.expression.RosettaIntLiteral
import com.regnosys.rosetta.rosetta.expression.RosettaOnlyElement
import com.regnosys.rosetta.rosetta.expression.RosettaOnlyExistsExpression
import com.regnosys.rosetta.rosetta.expression.RosettaStringLiteral
import com.regnosys.rosetta.rosetta.simple.Attribute
import com.regnosys.rosetta.rosetta.simple.Data
import com.regnosys.rosetta.rosetta.simple.Function
import com.regnosys.rosetta.rosetta.simple.ShortcutDeclaration
import com.regnosys.rosetta.rosetta.simple.SimplePackage
import com.regnosys.rosetta.types.RDataType
import com.regnosys.rosetta.types.REnumType
import com.regnosys.rosetta.types.RListType
import com.regnosys.rosetta.types.RType
import com.regnosys.rosetta.types.TypeFactory
import com.regnosys.rosetta.types.TypeValidationUtil
import com.regnosys.rosetta.utils.ExpressionHelper
import java.util.List
import org.eclipse.xtext.validation.AbstractDeclarativeValidator

import com.regnosys.rosetta.rosetta.RosettaSymbol
import com.regnosys.rosetta.rosetta.expression.RosettaSymbolReference
import com.regnosys.rosetta.rosetta.expression.RosettaImplicitVariable
import com.regnosys.rosetta.utils.ImplicitVariableUtil
import org.eclipse.xtext.EcoreUtil2
import com.regnosys.rosetta.rosetta.expression.AsKeyOperation
import com.regnosys.rosetta.rosetta.expression.OneOfOperation
import com.regnosys.rosetta.rosetta.expression.ChoiceOperation
import static com.regnosys.rosetta.rosetta.expression.ExpressionPackage.Literals.*
import java.util.Optional
import org.eclipse.emf.ecore.EObject
import com.regnosys.rosetta.rosetta.expression.ThenOperation
import com.regnosys.rosetta.types.builtin.RBuiltinTypeService
import com.regnosys.rosetta.types.builtin.RNumberType
import com.regnosys.rosetta.types.builtin.RStringType
import com.regnosys.rosetta.types.builtin.RBasicType
import com.regnosys.rosetta.rosetta.TypeCall
import com.regnosys.rosetta.utils.OptionalUtil
import com.regnosys.rosetta.rosetta.RosettaMetaType
import com.regnosys.rosetta.interpreter.RosettaInterpreter
import com.regnosys.rosetta.interpreter.RosettaInterpreterContext
import com.regnosys.rosetta.rosetta.RosettaTypeAlias
import com.regnosys.rosetta.interpreter.RosettaValue
import com.regnosys.rosetta.types.RAliasType
import com.regnosys.rosetta.types.RTypeFunction
import com.regnosys.rosetta.types.RParametrizedType
import com.regnosys.rosetta.rosetta.expression.ExpressionFactory
import com.regnosys.rosetta.utils.RosettaSimpleSystemSolver.Equation
import com.regnosys.rosetta.utils.RosettaSimpleSystemSolver
import java.util.function.BiFunction
import com.regnosys.rosetta.rosetta.expression.RosettaPatternLiteral

inject extension TypeFactory typeFactory
inject extension TypeValidationUtil util
inject extension ExpressionHelper exprHelper
inject extension ImplicitVariableUtil implicitVarUtil
inject extension RBuiltinTypeService builtinTypes
inject RosettaInterpreter interpreter
inject RosettaSimpleSystemSolver systemSolver


auxiliary {
	ancestors(Data t) : List<Data>
	ancestorEnums(RosettaEnumeration t) : List<RosettaEnumeration>
	comparable(RType t1, RType t2)
	overlap(RosettaCardinality c1, RosettaCardinality c2)
	listComparable(RListType t1, RListType t2)
	join(RType t1, RType t2) : RType
	union(RosettaCardinality c1, RosettaCardinality c2) : RosettaCardinality
	listJoin(RListType t1, RListType t2) : RListType
	allAttributes(Data d) : Iterable<Attribute>
	mayBeEmpty(Data d)
	
	listSubtypeCheck(RosettaExpression sourceObject, RListType expected)
	looseListSubtypeCheck(RosettaExpression sourceObject, RListType expected)
	subtypeCheck(RosettaExpression sourceObject, RType expected)
	comparableListTypeCheck(RosettaBinaryOperation sourceObject)
	comparableTypeCheck(RosettaBinaryOperation sourceObject)
	onlyRightIsSingularCheck(ModifiableBinaryOperation sourceObject)
	looseOnlyRightIsSingularCheck(ModifiableBinaryOperation sourceObject)
	constraintCheck(RosettaExpression sourceObject, RosettaCardinality expected)
	looseConstraintCheck(RosettaExpression sourceObject, RosettaCardinality expected)
	notConstraintCheck(RosettaExpression sourceObject, RosettaCardinality notExpected)
	isLooserConstraintCheck(RosettaExpression sourceObject, RosettaCardinality expected)
	
	// TODO: Functions I need temporarily during transition from old to new type system
	typeCallToRType(TypeCall rt, RosettaInterpreterContext context): RType
	typeFunctionOfTypeAlias(RosettaTypeAlias typeAlias): RTypeFunction cached
	keepTypeAliasIfPossible(RType t1, RType t2, BiFunction<RType, RType, RType> combineUnderlyingTypes): RType
	attributeListType(Attribute a): RListType
	symbolListType(RosettaSymbol c): RListType
	functionalOperationItemType(RosettaFunctionalOperation op): RListType
	typeOfImplicitVariable(EObject context): Optional<RListType>
}

judgments {
	inferType |- RosettaExpression expression : output RListType
		error "Cannot type " + stringRep(expression) + "."
		source expression
	subtype |- RType subtype <: RType supertype
		error subtype + " is not a subtype of " + supertype
	listSubtype |- RListType subtype <| RListType supertype
		error subtype + " is not a list subtype of " + supertype
}

/****** AUXILIARY DEFINITIONS *******/
auxiliary ancestors(Data t) {
	getAll(t,
		SimplePackage::eINSTANCE.data_SuperType,
		SimplePackage::eINSTANCE.data_SuperType,
		typeof(Data)
	)
}
auxiliary ancestorEnums(RosettaEnumeration t) {
	getAll(t,
		RosettaPackage::eINSTANCE.rosettaEnumeration_SuperType,
		RosettaPackage::eINSTANCE.rosettaEnumeration_SuperType,
		typeof(RosettaEnumeration)
	)
}
auxiliary comparable(RType t1, RType t2) {
	empty |- t1 <: t2
	or
	empty |- t2 <: t1
	or
	return false
}
auxiliary overlap(RosettaCardinality c1, RosettaCardinality c2) {
	(c1.unbounded || c1.sup >= c2.inf) && (c2.unbounded || c2.sup >= c1.inf)
	or
	return false
}
auxiliary listComparable(RListType t1, RListType t2) {
	comparable(t1.itemType, t2.itemType)
	overlap(t1.constraint, t2.constraint)
}
auxiliary join(RDataType t1, RDataType t2) {
	val st1 = ancestors(t1.^data)
	st1.add(0, t1.^data)
	val st2 = ancestors(t2.^data)
	st2.add(0, t2.^data)
	val result = st2.findFirst[st1.contains(it)]
	if (result === null) {
		return ANY
	}
	return new RDataType(result)
}
auxiliary join(REnumType t1, REnumType t2) {
	val st1 = ancestorEnums(t1.enumeration)
	st1.add(0, t1.enumeration)
	val st2 = ancestorEnums(t2.enumeration)
	st2.add(0, t2.enumeration)
	val result = st2.findFirst[st1.contains(it)]
	if (result === null) {
		return ANY
	}
	return new REnumType(result)
}
auxiliary join(RNumberType t1, RNumberType t2) {
	t1.join(t2)
}
auxiliary join(RStringType t1, RStringType t2) {
	t1.join(t2)
}
auxiliary join(RBasicType t1, RBasicType t2) {
	if (t1 == t2) {
		return t1
	} else if (t1 == NOTHING) {
		return t2
	} else if (t2 == NOTHING) {
		return t1
	}
	return ANY
}
auxiliary join(RBasicType t1, RType t2) {
	if (t1 == t2) {
		return t1
	} else if (t1 == NOTHING) {
		return t2
	}
	return ANY
}
auxiliary join(RType t1, RBasicType t2) {
	if (t1 == t2) {
		return t1
	} else if (t2 == NOTHING) {
		return t1
	}
	return ANY
}
auxiliary join(RAliasType t1, RAliasType t2) {
	if (t1 == t2) {
		return t1
	} else if (t1.typeFunction == t2.typeFunction) {
		val typeFunc = t1.typeFunction
		// Attempt to keep the alias
		val underlyingJoin = join(t1.refersTo, t2.refersTo)
		val aliasParams = typeFunc.reverse(underlyingJoin)
		return aliasParams.<RType>map[new RAliasType(typeFunc, it, underlyingJoin)]
			.orElse(underlyingJoin)
	} else {
		val superAliases = newArrayList
		var RType curr = t1
		while (curr instanceof RAliasType) {
			superAliases.add(curr)
			curr = curr.refersTo
		}
		curr = t2
		while (curr instanceof RAliasType) {
			val tf = curr.typeFunction
			val match = superAliases.findFirst[tf == typeFunction]
			if (match !== null) {
				return join(match, curr)
			}
			curr = curr.refersTo
		}
		return join(t1.refersTo, t2.refersTo)
	}
}
auxiliary join(RAliasType t1, RType t2) {
	return join(t1.refersTo, t2)
}
auxiliary join(RType t1, RAliasType t2) {
	return join(t1, t2.refersTo)
}
auxiliary join(RAliasType t1, RBasicType t2) {
	if (t2 == NOTHING) {
		return t1
	}
	return join(t1.refersTo, t2)
}
auxiliary join(RBasicType t1, RAliasType t2) {
	if (t1 == NOTHING) {
		return t2
	}
	return join(t1, t2.refersTo)
}
auxiliary join(RType t1, RType t2) {
	if (t1 == t2) {
		return t1
	}
	return ANY
}
auxiliary union(RosettaCardinality c1, RosettaCardinality c2) {
	if (c1.unbounded || c2.unbounded) {
		return createConstraint(Math.min(c1.inf, c2.inf))
	} else {
		return createConstraint(Math.min(c1.inf, c2.inf), Math.max(c1.sup, c2.sup))
	}
}
auxiliary listJoin(RListType t1, RListType t2) {
	val sup = join(t1.itemType, t2.itemType);
	return createListType(sup, union(t1.constraint, t2.constraint))
}
auxiliary allAttributes(Data d) {
	if (d.superType === null) {
		return d.attributes;
	} else {
		return allAttributes(d.superType) + d.attributes;
	}
}
auxiliary mayBeEmpty(Data d) {
	d.allAttributes.forall[
		card.inf === 0
	]
}

/****** TYPE VALIDATION UTILITIES *******/
auxiliary listSubtypeCheck(RosettaExpression sourceObject, RListType expected) {
	var RListType actual
	empty |- sourceObject : actual or actual = null
	if (expected !== null && actual !== null && !{empty |- actual <| expected}) {
		fail error notAListSubtypeMessage(expected, actual)
			source sourceObject
	}
}
auxiliary looseListSubtypeCheck(RosettaExpression sourceObject, RListType expected) {
    var RListType actual
    empty |- sourceObject : actual or actual = null
    if (expected !== null && actual !== null && !({empty |- actual.itemType <: expected.itemType} && expected.constraint.overlap(actual.constraint))) {
        fail error notAListSubtypeMessage(expected, actual)
            source sourceObject
    }
}
auxiliary subtypeCheck(RosettaExpression sourceObject, RType expected) {
	var RListType actual
	empty |- sourceObject : actual or actual = null
	if (expected !== null && actual !== null && !{empty |- actual.itemType <: expected}) {
		fail error notASubtypeMessage(expected, actual.itemType)
			source sourceObject
	}	
}
auxiliary comparableListTypeCheck(RosettaBinaryOperation sourceObject) {
	var RListType tl
	var RListType tr
	empty |- sourceObject.left : tl or tl = null
	empty |- sourceObject.right : tr or tr = null
	if (tl !== null && tr !== null) {
		tl.listComparable(tr)
		or
		fail error notListComparableMessage(tl, tr)
			source sourceObject
	}
}
auxiliary comparableTypeCheck(RosettaBinaryOperation sourceObject) {
	var RListType tl
	var RListType tr
	empty |- sourceObject.left : tl or tl = null
	empty |- sourceObject.right : tr or tr = null
	if (tl !== null && tr !== null) {
		tl.itemType.comparable(tr.itemType)
		or
		fail error notComparableMessage(tl.itemType, tr.itemType)
			source sourceObject
	}
}
auxiliary onlyRightIsSingularCheck(ModifiableBinaryOperation sourceObject) {
	var RListType tl
    var RListType tr
    empty |- sourceObject.left : tl or tl = null
    empty |- sourceObject.right : tr or tr = null
    if (tl !== null && tr !== null) {
        !tl.constraint.constraintEquals(single) && tr.constraint.constraintEquals(single)
        or
        {
            if (tl.constraint.constraintEquals(single)) {
                if (tr.constraint.constraintEquals(single)) {
                    fail error bothAreSingularMessage(sourceObject)
                        source sourceObject
                        feature ExpressionPackage.Literals.MODIFIABLE_BINARY_OPERATION__CARD_MOD
                } else {
                    fail error notRightIsSingularButLeftIsMessage(tr)
                        source sourceObject.right
                }
            } else {
                fail error notConstraintMessage(single, tr)
                    source sourceObject.right
            }
        }
    }
}
auxiliary looseOnlyRightIsSingularCheck(ModifiableBinaryOperation sourceObject) {
    var RListType tl
    var RListType tr
    empty |- sourceObject.left : tl or tl = null
    empty |- sourceObject.right : tr or tr = null
    if (tl !== null && tr !== null) {
        !tl.constraint.constraintEquals(single) && single.isSubconstraintOf(tr.constraint)
        or
        {
            if (tl.constraint.constraintEquals(single)) {
                if (tr.constraint.constraintEquals(single)) {
                    fail error bothAreSingularMessage(sourceObject)
                        source sourceObject
                        feature ExpressionPackage.Literals.MODIFIABLE_BINARY_OPERATION__CARD_MOD
                } else {
                    fail error notRightIsSingularButLeftIsMessage(tr)
                        source sourceObject.right
                }
            } else {
                fail error notConstraintMessage(single, tr)
                    source sourceObject.right
            }
        }
    }
}
auxiliary constraintCheck(RosettaExpression sourceObject, RosettaCardinality expected) {
	var RListType actual
	empty |- sourceObject : actual or actual = null
	if (expected !== null && actual !== null) {
		expected.constraintEquals(actual.constraint)
		or
		fail error notConstraintMessage(expected, actual)
			source sourceObject
	}
}
auxiliary looseConstraintCheck(RosettaExpression sourceObject, RosettaCardinality expected) {
	var RListType actual
	empty |- sourceObject : actual or actual = null
	if (expected !== null && actual !== null) {
		expected.isSubconstraintOf(actual.constraint)
		or
		fail error notConstraintMessage(expected, actual)
			source sourceObject
	}
}
auxiliary notConstraintCheck(RosettaExpression sourceObject, RosettaCardinality notExpected) {
	var RListType actual
	empty |- sourceObject : actual or actual = null
	if (notExpected !== null && actual !== null) {
		!notExpected.constraintEquals(actual.constraint)
		or
		fail error wrongConstraintMessage(notExpected, actual)
			source sourceObject
	}
}
auxiliary isLooserConstraintCheck(RosettaExpression sourceObject, RosettaCardinality expected) {
	var RListType actual
	empty |- sourceObject : actual or actual = null
	if (expected !== null && actual !== null) {
		expected.isSubconstraintOf(actual.constraint)
		or
		fail error notLooserConstraintMessage(expected, actual)
			source sourceObject
	}
}

auxiliary typeCallToRType(TypeCall call, RosettaInterpreterContext context) {
	val t = call.type
	switch t {
		Data: new RDataType(t)
		RosettaBuiltinType: {
			val argMap = call.arguments.toMap([parameter.name], [interpreter.interpret(value, context)])
			builtinTypes.getType(t.name, argMap).orElse(null)
		}
		RosettaEnumeration: new REnumType(t)
		RosettaMetaType: {
			val argMap = call.arguments.toMap([parameter.name], [interpreter.interpret(value, context)])
			val builtinResult = builtinTypes.getType(t.name, argMap)
			if (builtinResult.present) {
				builtinResult.get
			} else {
				t.typeCall.typeCallToRType(context)
			}
		}
		RosettaTypeAlias: {
			val args = newLinkedHashMap
			val absentParameters = t.parameters.toSet
			call.arguments.forEach[arg|
				val eval = interpreter.interpret(arg.value, context)
				args.put(arg.parameter.name, eval)
				absentParameters.remove(arg.parameter)
			]
			absentParameters.forEach[
				args.put(name, RosettaValue.^empty)
			]
			val refersTo = t.typeCall.typeCallToRType(RosettaInterpreterContext.of(args))
			new RAliasType(t.typeFunctionOfTypeAlias, args, refersTo)
		}
	}
}

auxiliary typeFunctionOfTypeAlias(RosettaTypeAlias typeAlias) {
	if (typeAlias.name == INT_NAME) {
		return INT_FUNCTION;
	}
	val parameters = typeAlias.parameters;
	val equations = 
			typeAlias.typeCall.arguments.map[arg|
				val ref = ExpressionFactory.eINSTANCE.createRosettaSymbolReference();
				ref.generated = true;
				ref.symbol = arg.parameter;
				return new Equation(ref, arg.value);
			].toList;
	return systemSolver.solve(equations, parameters.toSet).map[solutionSet|
		RTypeFunction.create(typeAlias.name,
			[arguments|
				typeCallToRType(typeAlias.typeCall, RosettaInterpreterContext.of(arguments))
			],
			[type|
				if (!(type instanceof RParametrizedType)) {
					return Optional.^empty
				}			
				val context = RosettaInterpreterContext.of((type as RParametrizedType).arguments);
				return solutionSet.getSolution(context).map[solution|
					val newArgs = newLinkedHashMap
					parameters.forEach[p| newArgs.put(p.name, solution.get(p))]
					return newArgs;
				]
			]
		)
	].orElseGet[
		RTypeFunction.create(typeAlias.name,
			[arguments|
				typeCallToRType(typeAlias.typeCall, RosettaInterpreterContext.of(arguments))
			],
			[Optional.^empty]
		)
	]
}

auxiliary keepTypeAliasIfPossible(RAliasType t1, RAliasType t2, BiFunction<RType, RType, RType> combineUnderlyingTypes) {
	if (t1.typeFunction == t2.typeFunction) {
		val typeFunc = t1.typeFunction
		val underlier = keepTypeAliasIfPossible(t1.refersTo, t2.refersTo, combineUnderlyingTypes)
		return typeFunc.reverse(underlier)
			.<RType>map[args| new RAliasType(typeFunc, args, underlier)]
			.orElse(underlier)
	} else {
		val superAliases = newArrayList
		var RType curr = t1
		while (curr instanceof RAliasType) {
			superAliases.add(curr)
			curr = curr.refersTo
		}
		curr = t2
		while (curr instanceof RAliasType) {
			val tf = curr.typeFunction
			val match = superAliases.findFirst[tf == typeFunction]
			if (match !== null) {
				return keepTypeAliasIfPossible(match, curr, combineUnderlyingTypes)
			}
			curr = curr.refersTo
		}
		return keepTypeAliasIfPossible(t1.refersTo, t2.refersTo, combineUnderlyingTypes)
	}
}
auxiliary keepTypeAliasIfPossible(RAliasType t1, RType t2, BiFunction<RType, RType, RType> combineUnderlyingTypes) {
	keepTypeAliasIfPossible(t1.refersTo, t2, combineUnderlyingTypes)
}
auxiliary keepTypeAliasIfPossible(RType t1, RAliasType t2, BiFunction<RType, RType, RType> combineUnderlyingTypes) {
	keepTypeAliasIfPossible(t1, t2.refersTo, combineUnderlyingTypes)
}
auxiliary keepTypeAliasIfPossible(RType t1, RType t2, BiFunction<RType, RType, RType> combineUnderlyingTypes) {
	combineUnderlyingTypes.apply(t1, t2)
}

auxiliary attributeListType(Attribute a) {
	return createListType(typeCallToRType(a.typeCall, new RosettaInterpreterContext), a.card)
}

auxiliary symbolListType(Attribute c) {
	return c.attributeListType
}

auxiliary symbolListType(ClosureParameter c) {
	val f = c.function
	val op = f.eContainer as RosettaFunctionalOperation
	return functionalOperationItemType(op)
}

auxiliary symbolListType(Data c) {
	return createListType(new RDataType(c), single)
}

auxiliary symbolListType(RosettaEnumeration c) {
	return createListType(new REnumType(c), single)
}

auxiliary symbolListType(ShortcutDeclaration c) {
	empty |- c.expression : var RListType t
	return t
}

auxiliary symbolListType(RosettaExternalFunction c) {
	return createListType(typeCallToRType(c.typeCall, new RosettaInterpreterContext), 1, 1)
}

auxiliary symbolListType(Function c) {
	return createListType(typeCallToRType(c.^output.typeCall, new RosettaInterpreterContext), c.^output.card)
}

auxiliary functionalOperationItemType(RosettaFunctionalOperation op) {
	empty |- op.argument : var RListType receiverType
	if (receiverType !== null) {
		if (op instanceof ThenOperation) {
			return receiverType
		} else {
			return createListType(receiverType.itemType, single)
		}
	}
	return null
}

auxiliary typeOfImplicitVariable(EObject c) {
	val definingContainer = c.findContainerDefiningImplicitVariable
	definingContainer.map [
		if (it instanceof Data) {
			createListType(new RDataType(it), single)
		} else if (it instanceof RosettaFunctionalOperation) {
			functionalOperationItemType
		}
	]
}

/*** SUBTYPING **/
rule SData // SA-Refl, SA-Ancestor
	G |- RDataType t1 <: RDataType t2
from {
	{
		t1 == t2
	} or
	{
		ancestors(t1.^data).contains(t2.^data)
	}
}

rule SEnum // SA-Refl, SA-Enum
	G |- REnumType t1 <: REnumType t2
from {
	{
		t1 == t2
	} or
	{
		ancestorEnums(t1.enumeration).contains(t2.enumeration)
	}
}

rule SNumber
	G |- RNumberType t1 <: RNumberType t2
from {
	true
}
rule SString
	G |- RStringType t1 <: RStringType t2
from {
	true
}
rule SBasic // SA-Refl, SA-Nothing
	G |- RBasicType t1 <: RBasicType t2
from {
	{
		t1 == t2
	} or {
		t1 == NOTHING
	} or {
		t2 == ANY
	}
}
rule SNothing // SA-Refl, SA-Nothing
	G |- RBasicType t1 <: RType t2
from {
	{
		t1 == t2
	} or {
		t1 == NOTHING
	}
}
rule SAny // SA-Refl, SA-Nothing
	G |- RType t1 <: RBasicType t2
from {
	{
		t1 == t2
	} or {
		t2 == ANY
	}
}

rule SAliasBoth
	G |- RAliasType t1 <: RAliasType t2
from {
	G |- t1.refersTo <: t2.refersTo
}
rule SAliasLeft
	G |- RAliasType t1 <: RType t2
from {
	G |- t1.refersTo <: t2
}
rule SAliasRight
	G |- RType t1 <: RAliasType t2
from {
	G |- t1 <: t2.refersTo
}

rule SRefl
	G |- RType t1 <: RType t2
from {
	t1 == t2
}

/*** LIST SUBTYPING ***/
rule SList // SA-List
	G |- RListType s <| RListType t
from {
	G |- s.itemType <: t.itemType
	s.constraint.isSubconstraintOf(t.constraint)
}

/*** TYPING ***/
axiom TBoolean
	G |- RosettaBooleanLiteral bool : singleBoolean
axiom TString
	G |- RosettaStringLiteral str : singleString(str.value.length, str.value.length)
axiom TNumber
	G |- RosettaNumberLiteral num : singleNumber(num.value.toPlainString.replaceAll("\\.|\\-", "").length, Math.max(0, num.value.scale), num.value, num.value)
axiom TInt
	G |- RosettaIntLiteral i : singleInt(if (i.value >= 0) i.value.toString.length else i.value.toString.length - 1, i.value, i.value)
axiom TPattern
	G |- RosettaPatternLiteral p : singlePattern

rule TVar // TA-Var, TA-Func
	G |- RosettaSymbolReference ref : RListType t
from {
	t = ref.symbol.symbolListType
}
rule TIt
	G |- RosettaImplicitVariable c : RListType t
from {
	t = c.typeOfImplicitVariable.orElse(null)
}

rule TArithmetic
	G |- ArithmeticOperation op : RListType lt
from {
	// TODO: keep type aliases
	G |- op.left : var RListType t1
	G |- op.right : var RListType t2
	if (t1 !== null && t2 !== null) {
		val item1 = t1.itemType
		val item2 = t2.itemType
		if (op.operator == '+') {
			if ({G |- item1 <: DATE}) {
				lt = singleDateTime
			} else if ({G |- item1 <: UNCONSTRAINED_STRING} && {G |- item2 <: UNCONSTRAINED_STRING}) {
				lt = createListType(keepTypeAliasIfPossible(item1, item2, [l, r|
					val s1 = l as RStringType
					val s2 = r as RStringType
					val newInterval = s1.interval.add(s2.interval)
					constrainedString(newInterval, Optional.^empty())
				]), single)
			} else if ({G |- item1 <: UNCONSTRAINED_NUMBER} && {G |- item2 <: UNCONSTRAINED_NUMBER}) {
				lt = createListType(keepTypeAliasIfPossible(item1, item2, [l, r|
					val n1 = l as RNumberType
					val n2 = r as RNumberType
					val newFractionalDigits = OptionalUtil.zipWith(n1.fractionalDigits, n2.fractionalDigits, [a,b|Math.max(a,b)])
					val newInterval = n1.interval.add(n2.interval)
					constrainedNumber(Optional.^empty(), newFractionalDigits, newInterval, Optional.^empty())
				]), single)
			}
		} else if (op.operator == '-') {
			if ({G |- item1 <: DATE} || {G |- item2 <: DATE}) {
				lt = singleUnconstrainedInt
			} else if ({G |- item1 <: UNCONSTRAINED_NUMBER} && {G |- item2 <: UNCONSTRAINED_NUMBER}) {
				lt = createListType(keepTypeAliasIfPossible(item1, item2, [l, r|
					val n1 = l as RNumberType
					val n2 = r as RNumberType
					val newFractionalDigits = OptionalUtil.zipWith(n1.fractionalDigits, n2.fractionalDigits, [a,b|Math.max(a,b)])
					val newInterval = n1.interval.subtract(n2.interval)
					constrainedNumber(Optional.^empty(), newFractionalDigits, newInterval, Optional.^empty())
				]), single)
			}
		} else if (op.operator == '*') {
			if ({G |- item1 <: UNCONSTRAINED_NUMBER} && {G |- item2 <: UNCONSTRAINED_NUMBER}) {
				lt = createListType(keepTypeAliasIfPossible(item1, item2, [l, r|
					val n1 = l as RNumberType
					val n2 = r as RNumberType
					val newFractionalDigits = OptionalUtil.zipWith(n1.fractionalDigits, n2.fractionalDigits, [a,b|a+b])
					val newInterval = n1.interval.multiply(n2.interval)
					constrainedNumber(Optional.^empty(), newFractionalDigits, newInterval, Optional.^empty())
				]), single)
			}
		} else if (op.operator == '/') {
			if ({G |- item1 <: UNCONSTRAINED_NUMBER} && {G |- item2 <: UNCONSTRAINED_NUMBER}) {
				lt = singleUnconstrainedNumber
			}
		}
	}
}

axiom TEquality
	G |- EqualityOperation op : singleBoolean
axiom TLogical
	G |- LogicalOperation op : singleBoolean
axiom TComparison
	G |- ComparisonOperation op : singleBoolean

rule TIf
	G |- RosettaConditionalExpression e : RListType t
from {
	var RListType tthen
	var RListType telse
	empty |- e.ifthen : tthen or tthen = null
	empty |- e.elsethen : telse or telse = null
	if (tthen !== null && telse !== null) {
		t = listJoin(tthen, telse)
	}
}

rule TList
	G |- ListLiteral e : RListType t
from {
	val telems = newArrayList
	if (e.elements.forall[
		var RListType telem
		empty |- it : telem or telem = null
		if (telem === null) {
			false
		} else {
			telems.add(telem)
			true
		}
	]) {
		t = telems.fold(emptyNothing, [ RListType acc, RListType telem |
			if (acc === null) {
				null
			} else {
				val sup = join(telem.itemType, acc.itemType);
				if ({G |- ANY <: sup}) {
					null
				} else {
					createListType(sup, telem.constraint + acc.constraint)
				}
			}
		])
	}
}

rule TProject // TA-Project
	G |- RosettaFeatureCall e : RListType t
from { // TODO: support metadata feature calls?
	G |- e.receiver : var RListType dt
	if (dt !== null) {
		val a = e.^feature
		switch (a) {
			Attribute: { // regular projections
				val at = a.attributeListType
				t = createListType(at.itemType, dt.constraint * at.constraint)
			}
			RosettaTypedFeature: { // projections on record types or of metadata properties
				if (a.typeCall === null) {
					fail error "Unsupported by the type system."
				} else {
					t = createListType(a.typeCall.typeCallToRType(new RosettaInterpreterContext), dt.constraint)
				}
			}
			RosettaEnumValue: { // projections on enums
				t = dt
			}
		}
	}
}

axiom TExists // TA-Exists
	G |- RosettaExistsExpression e : singleBoolean
axiom TAbsent
	G |- RosettaAbsentExpression e : singleBoolean
axiom TOnlyExists // TA-OnlyExists
	G |- RosettaOnlyExistsExpression e : singleBoolean
axiom TCount // TA-Count
	G |- RosettaCountOperation e : singleInt(Optional.^empty(), Optional.of(0), Optional.^empty())
rule TOnlyElement // TA-OnlyElement
	G |- RosettaOnlyElement e : RListType t
from {
	G |- e.argument : var RListType targ
	if (targ !== null) {
		t = createListType(targ.itemType, 0, 1)
	}
}
rule TAsKey
	G |- AsKeyOperation e : RListType t
from {
	G |- e.argument : t
}
axiom TOneOf
	G |- OneOfOperation e : singleBoolean
axiom TChoice
	G |- ChoiceOperation e : singleBoolean

/****** CHECK RULES ********/
checkrule CheckLeftArithmetic for
	ArithmeticOperation op
from {
	if (op.operator == '+') { // TODO: improve error messages
		{
			looseListSubtypeCheck(op.left, singleDate)
		} or {
			looseListSubtypeCheck(op.left, singleUnconstrainedString)
		} or {
			looseListSubtypeCheck(op.left, singleUnconstrainedNumber)
		}
	} else if (op.operator == '-') {
		{
			looseListSubtypeCheck(op.left, singleDate)
		} or {
			looseListSubtypeCheck(op.left, singleUnconstrainedNumber)
		}
	} else {
		looseListSubtypeCheck(op.left, singleUnconstrainedNumber)
	}
}
checkrule CheckRightArithmetic for
	ArithmeticOperation op
from {
	if (op.operator == '+') {
		{
			looseListSubtypeCheck(op.right, singleTime)
		} or {
			looseListSubtypeCheck(op.right, singleUnconstrainedString)
		} or {
			looseListSubtypeCheck(op.right, singleUnconstrainedNumber)
		}
	} else if (op.operator == '-') {
		{
			looseListSubtypeCheck(op.right, singleDate)
		} or {
			looseListSubtypeCheck(op.right, singleUnconstrainedNumber)
		}
	} else {
		looseListSubtypeCheck(op.right, singleUnconstrainedNumber)
	}
}
checkrule CheckAddition for
	ArithmeticOperation op
from {
	var RListType tl
	var RListType tr
	empty |- op.left : tl or tl = null
	empty |- op.right : tr or tr = null
	if (tl !== null && tr !== null) {
		if (op.operator == '+') {
			{
				empty |- tl.itemType <: DATE
				empty |- tr.itemType <: TIME
			}
			or
			{
				empty |- tl.itemType <: UNCONSTRAINED_STRING
				empty |- tr.itemType <: UNCONSTRAINED_STRING
			}
			or
			{
				empty |- tl.itemType <: UNCONSTRAINED_NUMBER
				empty |- tr.itemType <: UNCONSTRAINED_NUMBER
			}
			or 
				fail error "Expected arguments to be either both a `string` or both a `number`, but got `" + relevantItemTypeDescription(tl, tr) + "` and `" + relevantItemTypeDescription(tr, tl) + "` instead."
					source op
		} else if (op.operator == '-') {
			{
				empty |- tl.itemType <: DATE
				empty |- tr.itemType <: DATE
			}
			or
			{
				empty |- tl.itemType <: UNCONSTRAINED_NUMBER
				empty |- tr.itemType <: UNCONSTRAINED_NUMBER
			}
			or 
				fail error "Expected arguments to be either both a `date` or both a `number`, but got `" + tl.itemType.toString() + "` and `" + tr.itemType.toString() + "` instead."
					source op
		}
	}
}

checkrule CheckEqualityOperation for
	EqualityOperation op
from {
	if (op.cardMod === CardinalityModifier.^NONE) {
		comparableListTypeCheck(op)
	} else {
		looseOnlyRightIsSingularCheck(op)
		comparableTypeCheck(op)
	}
}

checkrule CheckLeftLogical for
	LogicalOperation op
from {
	looseListSubtypeCheck(op.left, singleBoolean)
}
checkrule CheckRightLogical for
	LogicalOperation op
from {
	looseListSubtypeCheck(op.right, singleBoolean)
}

checkrule CheckLeftComparison for
	ComparisonOperation op
from {
	if (op.cardMod === CardinalityModifier.^NONE) { // TODO: improve error messages
		{
			looseListSubtypeCheck(op.left, singleZonedDateTime)
		} or {
			looseListSubtypeCheck(op.left, singleDate)
		} or {
			looseListSubtypeCheck(op.left, singleUnconstrainedNumber)
		}
	} else {
		{
			subtypeCheck(op.left, ZONED_DATE_TIME)
		} or {
			subtypeCheck(op.left, DATE)
		} or {
			subtypeCheck(op.left, UNCONSTRAINED_NUMBER)
		}
	}
}
checkrule CheckRightComparison for
	ComparisonOperation op
from {
	if (op.cardMod === CardinalityModifier.^NONE) {
		{
			looseListSubtypeCheck(op.left, singleZonedDateTime)
		} or {
			looseListSubtypeCheck(op.right, singleDate)
		} or {
			looseListSubtypeCheck(op.right, singleUnconstrainedNumber)
		}
	} else {
		{
			subtypeCheck(op.left, ZONED_DATE_TIME)
		} or {
			subtypeCheck(op.right, DATE)
		} or {
			subtypeCheck(op.right, UNCONSTRAINED_NUMBER)
		}
	}
}
checkrule CheckComparison for
	ComparisonOperation op
from {
	var RListType tl
	var RListType tr
	empty |- op.left : tl or tl = null
	empty |- op.right : tr or tr = null
	if (tl !== null && tr !== null) {
		{
			empty |- tl.itemType <: ZONED_DATE_TIME
			empty |- tr.itemType <: ZONED_DATE_TIME
		}
		or
		{
			empty |- tl.itemType <: DATE
			empty |- tr.itemType <: DATE
		}
		or
		{
			empty |- tl.itemType <: UNCONSTRAINED_NUMBER
			empty |- tr.itemType <: UNCONSTRAINED_NUMBER
		}
		or
			fail error "Expected arguments to be either both a `date`, both a `number` or both a `zonedDateTime`, but got `" + tl.itemType.toString() + "` and `" + tr.itemType.toString() + "` instead."
				source op
	}
	if (op.cardMod !== CardinalityModifier.^NONE) {
		looseOnlyRightIsSingularCheck(op)
	}
}

checkrule CheckIfConditionalExpression for
	RosettaConditionalExpression e
from {
	looseListSubtypeCheck(e.^if, singleBoolean)
}
checkrule CheckBodyConditionalExpression for
	RosettaConditionalExpression e
from {
	var RListType tthen
	var RListType telse
	empty |- e.ifthen : tthen or tthen = null
	empty |- e.elsethen : telse or telse = null
	if (tthen !== null && telse !== null) {
		val joined = listJoin(tthen, telse)
		
		if ({empty |- ANY <: joined.itemType}) {
			fail error "Types `" + tthen.itemType.name + "` and `" + telse.itemType.name + "` do not have a common supertype."
		}
	}
}

checkrule CheckListLiteral for
	ListLiteral e
from {
	val telems = newArrayList
	if (e.elements.forall[
		var RListType telem
		empty |- it : telem or telem = null
		if (telem !== null) {
			telems.add(telem)
		}
		telem !== null
	]) {
		telems.fold(emptyNothing, [ RListType acc, RListType telem |
			if (acc === null) {
				null
			} else {
				val sup = join(telem.itemType, acc.itemType);
				if ({empty |- ANY <: sup}) {
					null
				} else {
					createListType(sup, telem.constraint + acc.constraint)
				}
			}
		]) !== null
		or
		fail error "Elements do not have a common supertype: " + telems.join(', ')["`" + it.itemType.name + "`"] + "."
	}
}
 
checkrule CheckRosettaSymbolReference for RosettaSymbolReference e from {
	val f = e.symbol
	switch f {
        RosettaExternalFunction: {
        	{
				f.parameters.size() == e.args.size()
				or
				fail error "Expected " + f.parameters.size() + " argument" + (if (f.parameters.size() === 1) "" else "s") + ", but got " + e.args.size() + " instead."
			}
			(0..<e.args.size).forall[idx |
				val param = f.parameters.get(idx)
				val paramType = if (param.isArray) createListType(typeCallToRType(param.typeCall, new RosettaInterpreterContext), 0) else createListType(typeCallToRType(param.typeCall, new RosettaInterpreterContext), 1, 1)
				looseListSubtypeCheck(e.args.get(idx), paramType)
			]
        }
        Function: {
            {
				f.inputs.size() == e.args.size()
				or
				fail error "Expected " + f.inputs.size() + " argument" + (if (f.inputs.size() === 1) "" else "s") + ", but got " + e.args.size() + " instead."
			}
			(0..<e.args.size).forall[idx |
				looseListSubtypeCheck(e.args.get(idx), f.inputs.get(idx).attributeListType)
			]
        }
    }
}

checkrule CheckExistsExpression for RosettaExistsExpression e from {
	isLooserConstraintCheck(e.argument, createConstraint(0, 1))
}
checkrule CheckAbsentExpression for RosettaAbsentExpression e from {
	isLooserConstraintCheck(e.argument, createConstraint(0, 1))
}
checkrule CheckOnlyExistsExpression for RosettaOnlyExistsExpression e from {
	val first = e.args.head
	val parent = first.parentExpression
	for (var i = 1; i < e.args.size; i++) {
		val other = e.args.get(i)
		for (var j = 0; j < i; j++) {
			if (EcoreUtil2.equals(e.args.get(j), other)) {
				fail error "Duplicate attribute."
					source other
			}
		}
		val otherParent = other.parentExpression
		if ((parent === null) !== (otherParent === null) || parent !== null && otherParent !== null && !EcoreUtil2.equals(parent, otherParent)) {
			if (otherParent !== null) {
				fail error "All parent paths must be equal."
					source otherParent
			} else {
				fail error "All parent paths must be equal."
					source other
			}
		}
	}
	if (parent === null && !e.implicitVariableExistsInContext) {
		fail error "Object must have a parent object."
			source e.args.head
	}
	
	var RListType parentType = null
	if (parent !== null) {
		looseConstraintCheck(parent, single)
		empty |- parent : parentType
	} else {
		parentType = e.typeOfImplicitVariable.orElse(null)
		if (parentType !== null) {
			single.isSubconstraintOf(parentType.constraint)
			or
			fail error notConstraintMessage(single, parentType)
				source e
		}
	}
	val parentData = (parentType.itemType as RDataType).^data
	if (parentData !== null) {
		mayBeEmpty(parentData)
		or
		fail error "The `only exists` operator is not applicable to instances of `" + parentData.name + "`."
			source parent
	}
}
checkrule CheckOneOfOperation for OneOfOperation e from {
	looseConstraintCheck(e.argument, single)
	empty |- e.argument : var RListType pt
	if (pt !== null) {
		val itemType = pt.itemType
		if (!(itemType instanceof RDataType)) {
			fail error "The `" + e.operator + "` operator is not applicable to instances of `" + itemType + "`."
				source e.argument
		}
	}
}
checkrule CheckChoiceOperation for ChoiceOperation e from {
	looseConstraintCheck(e.argument, single)
	empty |- e.argument : var RListType pt
	if (pt !== null) {
		val itemType = pt.itemType
		if (!(itemType instanceof RDataType)) {
			fail error "The `" + e.operator + "` operator is not applicable to instances of `" + itemType + "`."
				source e.argument
		}
	}
	if(e.attributes.size < 2) {
		fail error "At least two attributes must be passed to a choice rule."
			feature CHOICE_OPERATION__ATTRIBUTES
	}
}
